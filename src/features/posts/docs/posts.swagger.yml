openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0

securitySchemes:
  BasicAuth:
    type: http
    scheme: basic

tags:
  - name: Posts
    description: API for managing posts

paths:
  /api/posts:
    get:
      summary: Get a list of all posts
      tags: [Posts]
      security:
        - BasicAuth: []
      responses:
        200:
          description: List of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Add a new post
      tags: [Posts]
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInputDto'
      responses:
        201:
          description: The post was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/posts/{id}:
    get:
      summary: Get a post by ID
      tags: [Posts]
      security:
        - BasicAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 'The unique identifier of the post'
          schema:
            type: string
            example: '123e4567-e89b-12d3-a456-426614174000'
      responses:
        200:
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: Post not found
    put:
      summary: Update a post by ID
      tags: [Posts]
      security:
        - BasicAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 'The unique identifier of the post'
          schema:
            type: string
            example: '123e4567-e89b-12d3-a456-426614174000'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInputDto'
      responses:
        204:
          description: Post updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        404:
          description: Post not found
    delete:
      summary: Delete a post by ID
      tags: [Posts]
      security:
        - BasicAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 'The unique identifier of the post'
          schema:
            type: string
            example: '123e4567-e89b-12d3-a456-426614174000'
      responses:
        204:
          description: 'Post deleted successfully'
        404:
          description: 'Post not found'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Post:
      type: object
      required:
        - id
        - title
        - shortDescription
        - content
        - blogId
        - blogName
      properties:
        id:
          type: string
          description: 'The unique identifier for the post'
          example: '123e4567-e89b-12d3-a456-426614174000'
        title:
          type: string
          description: 'The title of the post'
          example: 'My First Post'
        shortDescription:
          type: string
          description: 'A brief description of the post'
          example: 'This is a short description of my first post'
        content:
          type: string
          description: 'The main content of the post'
          example: 'This is the full content of my first post...'
        blogId:
          type: string
          description: 'The ID of the blog this post belongs to'
          example: '123e4567-e89b-12d3-a456-426614174000'
        blogName:
          type: string
          description: 'The name of the blog this post belongs to'
          example: 'My Blog'
    PostInputDto:
      type: object
      required:
        - title
        - shortDescription
        - content
        - blogId
      properties:
        title:
          type: string
          description: 'The title of the post'
          example: 'My First Post'
        shortDescription:
          type: string
          description: 'A brief description of the post'
          example: 'This is a short description of my first post'
        content:
          type: string
          description: 'The main content of the post'
          example: 'This is the full content of my first post...'
        blogId:
          type: string
          description: 'The ID of the blog this post belongs to'
          example: '123e4567-e89b-12d3-a456-426614174000'
    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: 'title'
        message:
          type: string
          example: 'Invalid title'
    ValidationErrorResponse:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
